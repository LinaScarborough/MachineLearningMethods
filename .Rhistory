# Translate dog colors
df_EN$DogColor <- replace_patterns(df_EN$DogColor, color_patterns, color_replacements)
# Optional: Print unique values to check the translations
print(unique(df_EN$MixedBreed))
print(unique(df_EN$BreedType))
print(unique(df_EN$DogColor))
write.csv(df_EN, "df_EN.csv", row.names = FALSE)
df_EN$unique_OwnerId <- !duplicated(df_EN$OwnerId)
head(df_EN)
# Create a new DataFrame with selected columns and convert 'NumberOfDogs' to numeric
new_df <- df_EN %>%
select(KeyDateYear, OwnerId, OwnerAgeGroup, OwnerSex, DistrictSort, QuarCd, PrimaryBreed, SecondaryBreed, MixedBreed, BreedType, DogBirthYear, DogAgeGroupCd, DogSex, NumberOfDogs, unique_OwnerId) %>%
mutate(NumberOfDogs = as.numeric(as.character(NumberOfDogs)))
head(new_df, 5)
# Load dataset
str(df_EN)
# Extract and count unique years
unique_years <- unique(new_df$KeyDateYear)
number_of_unique_years <- length(unique_years)
print(number_of_unique_years)
print(unique_years)
# Extract and count unique Owner IDs
unique_Owner <- unique(new_df$OwnerId)
number_of_unique_Owner <- length(unique_Owner)
print(number_of_unique_Owner)
# Define UI
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("selectedYear", "Select Year:",
choices = unique(new_df$KeyDateYear)),
selectInput("selectedGender", "Select Gender:",
choices = c("All" = "all", "Male" = "male", "Female" = "female")),
helpText("Displays unique owner IDs by age group and selected gender for the chosen year.")
),
mainPanel(
plotOutput("genderPlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$genderPlot <- renderPlot({
# Aggregate unique Owner IDs by Age Group, Year, and Gender
if (input$selectedGender == "all") {
# Sum across both genders
unique_owner_counts_gender <- new_df %>%
group_by(KeyDateYear, OwnerAgeGroup) %>%
summarise(UniqueOwnerCountGender = n_distinct(OwnerId), .groups = 'drop')
} else {
# Filter for a specific gender
unique_owner_counts_gender <- new_df %>%
group_by(KeyDateYear, OwnerAgeGroup, OwnerSex) %>%
summarise(UniqueOwnerCountGender = n_distinct(OwnerId), .groups = 'drop') %>%
filter(OwnerSex == input$selectedGender)
}
# Adjust factor levels
unique_owner_counts_gender$OwnerAgeGroup <- factor(unique_owner_counts_gender$OwnerAgeGroup,
levels = unique(new_df$OwnerAgeGroup[order(new_df$OwnerAgeGroup)]))
# Filter data for the specific year
data_for_year_gender <- filter(unique_owner_counts_gender, KeyDateYear == as.numeric(input$selectedYear))
# Create the plot
ggplot(data_for_year_gender, aes(x = OwnerAgeGroup, y = UniqueOwnerCountGender, fill = OwnerAgeGroup)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = UniqueOwnerCountGender), vjust = -0.5, color = "black", size = 3.5) +
geom_hline(yintercept = c(100, 500, 1000, 1500), linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = paste("Unique Owner IDs by Age Group and", input$selectedGender, "in", input$selectedYear),
x = "Owner Age Group",
y = "Count of Unique Owner IDs") +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous(limits = c(0, max(2000, max(data_for_year_gender$UniqueOwnerCountGender) + 500)), breaks = seq(0, 2000, by = 500)) +
scale_x_discrete(labels = function(x) {
x <- gsub("[0-9]+ to [0-9]+ years old", "", x)
gsub("Unknown", "", x)
})
})
}
shinyApp(ui = ui, server = server)
# Aggregate unique Owner IDs by Age Group and Year
unique_owner_counts <- new_df %>%
group_by(KeyDateYear, OwnerAgeGroup) %>%
summarise(UniqueOwnerCount = n_distinct(OwnerId), .groups = 'drop')
# Adjust factor levels in the aggregated data before plotting
unique_owner_counts <- unique_owner_counts %>%
arrange(desc(UniqueOwnerCount)) %>%
mutate(OwnerAgeGroup = fct_inorder(OwnerAgeGroup),
KeyDateYear = as.numeric(as.character(KeyDateYear)))  # Convert KeyDateYear to numeric
# Create the line plot for all years with a line per age group
p <- ggplot(unique_owner_counts, aes(x = KeyDateYear, y = UniqueOwnerCount, group = OwnerAgeGroup, color = OwnerAgeGroup)) +
geom_line(size = 1) +  # Add line
geom_point(size = 3) +  # Add points
geom_hline(yintercept = c(100, 500, 1000, 1500, 2000), linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Unique Owner IDs by Age Group Over Years",
x = "Year",
y = "Count of Unique Owner IDs") +
scale_color_brewer(palette = "Paired") +  # Use color to differentiate lines
scale_y_continuous(limits = c(0, 2500), breaks = seq(0, 2500, by = 500)) +
scale_x_continuous(breaks = seq(min(unique_owner_counts$KeyDateYear), max(unique_owner_counts$KeyDateYear), by = 1))  # Define breaks in the x-axis scale to show each year
# Print the plot
print(p)
# Convert NumberOfDogs to numeric
new_df <- new_df %>%
mutate(NumberOfDogs = as.numeric(NumberOfDogs))
# Check for any conversion problems
sum(is.na(new_df$NumberOfDogs))
# Convert KeyDateYear to numeric
new_df$KeyDateYear <- as.numeric(as.character(new_df$KeyDateYear))
# Aggregate data to get total number of dogs per year
yearly_dog_counts <- new_df %>%
group_by(KeyDateYear) %>%
summarize(TotalDogs = sum(NumberOfDogs), .groups = 'drop')
# Calculate the percentage change for annotations
yearly_dog_counts <- yearly_dog_counts %>%
arrange(KeyDateYear) %>%
mutate(Change = c(NA, diff(TotalDogs)),
PercentChange = Change / lag(TotalDogs) * 100)
# Define UI
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
helpText("Click on a year in the bar plot to see the percentage change in dog registrations."),
plotOutput("dogPlot", click = "plot_click"),
verbatimTextOutput("click_info")
),
mainPanel(
plotOutput("dogChangePlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$dogPlot <- renderPlot({
ggplot(yearly_dog_counts, aes(x = KeyDateYear, y = TotalDogs)) +
geom_col(fill = "darkseagreen") +
geom_hline(yintercept = c(2500, 5000, 7500), linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Total Number of Dogs per Year",
x = "Year",
y = "Total Number of Dogs") +
scale_x_continuous(breaks = yearly_dog_counts$KeyDateYear,
labels = yearly_dog_counts$KeyDateYear) +
scale_y_continuous(labels = scales::comma,
breaks = seq(0, 10000, by = 1000),
limits = c(0, 10000)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$click_info <- renderPrint({
if (!is.null(input$plot_click)) {
year_clicked <- round(input$plot_click$x)
year_data <- yearly_dog_counts %>%
filter(KeyDateYear == year_clicked)
if (nrow(year_data) > 0) {
cat("Year:", year_data$KeyDateYear, "\n")
cat("Total Dogs:", year_data$TotalDogs, "\n")
cat("Percentage Change:", sprintf("%.1f%%", year_data$PercentChange), "\n")
} else {
cat("No data available for the selected year.")
}
}
})
output$dogChangePlot <- renderPlot({
ggplot(yearly_dog_counts, aes(x = KeyDateYear, y = TotalDogs)) +
geom_col(fill = "darkseagreen") +
geom_hline(yintercept = c(2500, 5000, 7500), linetype = "dashed", color = "red") +
geom_smooth(method = "lm", color = "red", linetype = "dashed", se = FALSE) +
geom_text(data = yearly_dog_counts, aes(label = sprintf("%.1f%%", PercentChange)),
vjust = -1.5, hjust = 0.5, color = "darkgreen", size = 3.5) +
theme_minimal() +
labs(title = "Total Number of Dogs per Year",
x = "Year",
y = "Total Number of Dogs") +
scale_x_continuous(breaks = yearly_dog_counts$KeyDateYear) +
scale_y_continuous(labels = scales::comma,
breaks = seq(0, 10000, by = 1000),
limits = c(0, 10000)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("selectedYear", "Select Year:",
choices = unique(new_df$KeyDateYear)),
helpText("Displays a heatmap of unique owner counts by age group and gender for the selected year.")
),
mainPanel(
plotOutput("ownerHeatmap")
)
)
)
server <- function(input, output) {
output$ownerHeatmap <- renderPlot({
# Prepare the data
owner_counts <- new_df %>%
select(KeyDateYear, OwnerAgeGroup, OwnerSex, OwnerId) %>%
distinct(KeyDateYear, OwnerAgeGroup, OwnerSex, OwnerId) %>%
group_by(KeyDateYear, OwnerAgeGroup, OwnerSex) %>%
summarize(UniqueOwners = n(), .groups = 'drop')
# Filter data for the specific year selected by user
yearly_data <- filter(owner_counts, KeyDateYear == as.numeric(input$selectedYear))
# Create the heatmap
p <- ggplot(yearly_data, aes(x = OwnerSex, y = OwnerAgeGroup, fill = UniqueOwners)) +
geom_tile() +
scale_fill_gradientn(colors = brewer.pal(11, "Spectral"), limits = c(0, max(yearly_data$UniqueOwners, na.rm = TRUE)), name = "Total Owners") +
theme_minimal() +
labs(title = paste("Heatmap of Unique Owners by Gender and Age Group in", input$selectedYear),
x = "Owner's Gender",
y = "Owner's Age Group",
fill = "Number of Unique Owners") +
theme(axis.text.y = element_text(angle = 45, hjust = 1))
# Return the plot
p
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("selectedYear", "Select Year:",
choices = unique(new_df$KeyDateYear)),
helpText("Displays the total count of dogs by district for the selected year.")
),
mainPanel(
plotOutput("dogPlot")
)
)
)
server <- function(input, output) {
output$dogPlot <- renderPlot({
# Filter and aggregate data based on the selected year, excluding District 15
yearly_data <- new_df %>%
filter(KeyDateYear == as.numeric(input$selectedYear), !is.na(DistrictSort), DistrictSort != "15") %>%
group_by(DistrictSort) %>%
summarize(TotalDogs = sum(NumberOfDogs), .groups = 'drop') %>%
arrange(desc(TotalDogs))  # Arrange by TotalDogs in descending order
# Create the bar plot
p <- ggplot(yearly_data, aes(x = reorder(DistrictSort, -TotalDogs), y = TotalDogs, fill = DistrictSort)) +
geom_col() +
geom_text(aes(label = TotalDogs), vjust = -0.3, color = "black", size = 3.5) +  # Add dog counts on bars
geom_hline(yintercept = c(100, 500, 1000, 1500), linetype = "dashed", color = "red") +
scale_fill_viridis_d(name = "District") +
scale_y_continuous(limits = c(0, 2000), breaks = seq(0, 2000, by = 500)) +
theme_minimal() +
labs(title = paste("Total Count of Dogs by District in", input$selectedYear),
x = "District",
y = "Total Number of Dogs") +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "none")
return(p)
})
}
shinyApp(ui = ui, server = server)
# Select my variables. Updated with Owner Age.
df_EN <- df_EN[, c("PrimaryBreed", "DogAgeGroupCd", "DogSexCd")]
# Clean NAs
missing_values <- colSums(is.na(df_EN))
print(missing_values) # no missing values :)
# Summary of DogAgeGroupCd
summary(df_EN$DogAgeGroupCd)
# Output shows max value 999 -> nonsensical. It refers to meaning "age unknown". So we replace it with the average age.
mean_dog_age <- mean(df_EN$DogAgeGroupCd[df_EN$DogAgeGroupCd != 999], na.rm = TRUE)
df_EN <- df_EN %>%
mutate(DogAgeGroupCd = ifelse(DogAgeGroupCd == 999, mean_dog_age, DogAgeGroupCd))
summary(df_EN$DogAgeGroupCd) # Now output makes much more sense.
#  Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#0.000   2.000   5.000   5.887   9.000  23.000
# Distributions
table(df_EN$DogSexCd)
# The distribution of dog sexes shows there are 35,409 female dogs (coded 2) and 35,558 male dogs (coded 1).
# There's no significant skew towards one sex in the dataset.
# Favourite 5 breeds
breed_counts <- table(df_EN$PrimaryBreed)
sorted_breeds <- sort(breed_counts, decreasing = TRUE)
top_5_breeds <- head(sorted_breeds, 5)
top_5_breeds
# Fit the binomial logistic regression model
binomial_model <- glm(DogSexCd ~ DogAgeGroupCd, family = binomial, data = df_EN)
# Fit the binomial logistic regression model
binomial_model <- glm(DogSexCd ~ DogAgeGroupCd, family = binomial, data = df_EN)
# Fit the binomial logistic regression model
binomial_model <- glm(DogSexCd ~ DogAgeGroupCd, family = "binomial", data = df_EN)
head(df_EN)
# Create a new dataframe with the selected variables
df_subset <- df_EN[, c("PrimaryBreed", "DogAgeGroupCd", "DogSexCd")]
# Clean NAs
missing_values <- colSums(is.na(df_subset))
print(missing_values) # no missing values :)
# Summary of DogAgeGroupCd
summary(df_subset$DogAgeGroupCd)
# Output shows max value 999 -> nonsensical. It refers to meaning "age unknown". So we replace it with the average age.
mean_dog_age <- mean(df_subset$DogAgeGroupCd[df_subset$DogAgeGroupCd != 999], na.rm = TRUE)
df_subset <- df_subset %>%
mutate(DogAgeGroupCd = ifelse(DogAgeGroupCd == 999, mean_dog_age, DogAgeGroupCd))
summary(df_subset$DogAgeGroupCd) # Now output makes much more sense.
#  Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#0.000   2.000   5.000   5.887   9.000  23.000
# Distributions
table(df_subset$DogSexCd)
# The distribution of dog sexes shows there are 35,409 female dogs (coded 2) and 35,558 male dogs (coded 1).
# There's no significant skew towards one sex in the dataset.
# Favourite 5 breeds
breed_counts <- table(df_subset$PrimaryBreed)
sorted_breeds <- sort(breed_counts, decreasing = TRUE)
top_5_breeds <- head(sorted_breeds, 5)
top_5_breeds
# Load dataset
df <- read.csv("Datasets/kul100od1001.csv")
setwd("~/GitHub/MachineLearningMethods")
# Load dataset
df <- read.csv("Datasets/kul100od1001.csv")
# Duplicate and rename df for English version
df_EN <- df
# Define translations for column names in English
colnames(df_EN) <- c("KeyDateYear", "DataStatusCd", "OwnerId", "OwnerAgeGroupCd", "OwnerAgeGroup", "OwnerAgeGroupSort", "OwnerSexCd", "OwnerSex", "OwnerSexSort", "DistrictCd", "District", "DistrictSort", "QuarCd", "Quar", "QuarSort", "PrimaryBreed", "SecondaryBreed", "MixedBreedCd", "MixedBreed", "MixedBreedSort", "BreedTypeCd", "BreedType", "BreedTypeSort", "DogBirthYear", "DogAgeGroupCd", "DogAgeGroup", "DogAgeGroupSort", "DogSexCd", "DogSex", "DogSexSort", "DogColor", "NumberOfDogs")
# Define a function to replace multiple patterns at once
replace_patterns <- function(text, patterns, replacements) {
for (i in seq_along(patterns)) {
text <- str_replace_all(text, patterns[i], replacements[i])
}
return(text)
}
# Define patterns and replacements for content translation
patterns <- c("- bis ", "-Jährige", "männlich", "weiblich", "Keine", "Unbekannt", "Rassehund", "Mischling, beide Rassen bekannt", "Mischling, sekundäre Rasse unbekannt", "Mischling, beide Rassen unbekannt", "Kleinwüchsig", "Rassentypenliste I", "Rassentypenliste II")
replacements <- c(" to ", " years old", "male", "female", "none", "Unknown", "Pedigree dog", "Mixed breed, both breeds known", "Mixed breed, secondary breed unknown", "Mixed breed, both breeds unknown", "Small stature", "Breed type list I", "Breed type list II")
# Apply the function across all columns
df_EN[] <- lapply(df_EN, function(x) replace_patterns(x, patterns, replacements))
# Color translation - can be further customized based on your dataset
color_patterns <- c("schwarz", "braun", "weiss", "grau", "silber", "rot", "gelb", "hell", "dunkel", "gestromt", "schimmel", "zweifarbig", "dreifarbig", "vierfarbig", "gemischt", "meliert", "hirschrot mit Maske", "löwenfarbig")
color_replacements <- c("black", "brown", "white", "gray", "silver", "red", "yellow", "light", "dark", "brindle", "mold", "2 colors", "3 colors", "4 colors", "mixed", "mottled", "stag red with mask", "lion-colored")
# Translate dog colors
df_EN$DogColor <- replace_patterns(df_EN$DogColor, color_patterns, color_replacements)
# Optional: Print unique values to check the translations
print(unique(df_EN$MixedBreed))
print(unique(df_EN$BreedType))
print(unique(df_EN$DogColor))
write.csv(df_EN, "df_EN.csv", row.names = FALSE)
df_EN$unique_OwnerId <- !duplicated(df_EN$OwnerId)
head(df_EN)
# Fit the binomial logistic regression model
binomial_model <- glm(DogSexCd ~ DogAgeGroupCd, family = binomial, data = df_EN)
df_EN_subset <- df_EN
df_EN_subset$DogSexCd <- ifelse(df_EN_subset$DogSexCd == "Female", 1, 0)
# Fit the binomial logistic regression model
binomial_model <- glm(DogSexCd ~ DogAgeGroupCd, family = binomial, data = df_EN_subset)
# Summary of the model
summary(binomial_model)
# Odds ratios
exp_coef <- exp(coef(binomial_model))
print(exp_coef)
# Percentage change in odds
percentage_change <- (exp_coef - 1) * 100
# Interpretation of the coefficients
print("Interpretation of Coefficients:")
print(paste("For every increase in dog age group, the odds of being female increase by",
round(percentage_change["DogAgeGroupCd"], 2), "%"))
# I first subset the dataset. This is to include owners in their 40s and the 2 analysed breeds.
subset_df <- df[df$AgeV10Coded == 40 & (df$Breed1Text == "Chihuahua" | df$Breed1Text == "Unbekannt"), ]
names(df) # Debugging; Age10Coded wasn't in dataframe.
df <- df.dogs[, c("Breed1Text", "DogAgeCoded", "DogSexCoded", "AgeV10Coded", "AgeV10Text")]
# Make a subset copy of df_EN for the specific analysis
df_subset <- df_EN
# Subset the dataframe to include owners in their 40s and the 2 analyzed breeds
subset_df <- df_subset[df_subset$OwnerAgeGroupCd == 40 &
(df_subset$PrimaryBreed == "Chihuahua" | df_subset$PrimaryBreed == "unknown"), ]
# Debugging: Check column names
names(df_subset)
# Create a binary variable for Chihuahua ownership
subset_df$ChihuahuaOwned <- ifelse(subset_df$PrimaryBreed == "Chihuahua", 1, 0)
# Binomial logistic regression
binomial_model <- glm(ChihuahuaOwned ~ OwnerAgeGroupCd, family = binomial, data = subset_df)
# Make a subset copy of df_EN for the specific analysis
df_subset <- df_EN
# Subset the dataframe to include owners in their 40s and the 2 analyzed breeds
subset_df <- df_subset %>%
filter(OwnerAgeGroupCd == 40 &
(PrimaryBreed == "Chihuahua" | PrimaryBreed == "unknown"))
# Debugging: Check column names
names(df_subset)
# Create a binary variable for Chihuahua ownership
subset_df <- subset_df %>%
mutate(ChihuahuaOwned = ifelse(PrimaryBreed == "Chihuahua", 1, 0))
# Ensure variables are factors
subset_df$OwnerAgeGroupCd <- as.factor(subset_df$OwnerAgeGroupCd)
subset_df$ChihuahuaOwned <- as.factor(subset_df$ChihuahuaOwned)
# Check levels of the factors
levels(subset_df$OwnerAgeGroupCd)
levels(subset_df$ChihuahuaOwned)
# Binomial logistic regression
binomial_model <- glm(ChihuahuaOwned ~ OwnerAgeGroupCd, family = binomial, data = subset_df)
# Make a subset copy of df_EN for the specific analysis
df_subset <- df_EN
# Subset the dataframe to include owners in their 40s and the 2 analyzed breeds
subset_df <- df_subset %>%
filter(OwnerAgeGroupCd == 40 &
(PrimaryBreed == "Chihuahua" | PrimaryBreed == "unknown"))
# Debugging: Check column names
names(df_subset)
# Create a binary variable for Chihuahua ownership
subset_df <- subset_df %>%
mutate(ChihuahuaOwned = ifelse(PrimaryBreed == "Chihuahua", 1, 0))
# Ensure variables are factors
subset_df$OwnerAgeGroupCd <- as.factor(subset_df$OwnerAgeGroupCd)
subset_df$ChihuahuaOwned <- as.factor(subset_df$ChihuahuaOwned)
# Check levels of the factors
levels(subset_df$OwnerAgeGroupCd)
levels(subset_df$ChihuahuaOwned)
# Binomial logistic regression
binomial_model <- glm(ChihuahuaOwned ~ OwnerAgeGroupCd, family = binomial, data = subset_df)
library(dplyr)
# Make a subset copy of df_EN for the specific analysis
df_subset <- df_EN
# Subset the dataframe to include owners in their 40s and the 2 analyzed breeds
subset_df <- df_subset %>%
filter(OwnerAgeGroupCd == 40 &
(PrimaryBreed == "Chihuahua" | PrimaryBreed == "unknown"))
# Debugging: Check column names
names(df_subset)
# Create a binary variable for Chihuahua ownership
subset_df <- subset_df %>%
mutate(ChihuahuaOwned = ifelse(PrimaryBreed == "Chihuahua", 1, 0))
# Ensure OwnerAgeGroupCd is treated as a factor
subset_df$OwnerAgeGroupCd <- as.factor(subset_df$OwnerAgeGroupCd)
# Binomial logistic regression
binomial_model <- glm(ChihuahuaOwned ~ OwnerAgeGroupCd, family = binomial(link = "logit"), data = subset_df)
library(dplyr)
# Make a subset copy of df_EN for the specific analysis
df_subset <- df_EN
# Subset the dataframe to include owners in their 40s and the 2 analyzed breeds
subset_df <- df_subset %>%
filter(OwnerAgeGroupCd == 40 &
(PrimaryBreed == "Chihuahua" | PrimaryBreed == "unknown"))
# Debugging: Check column names
names(df_subset)
# Create a binary variable for Chihuahua ownership
subset_df <- subset_df %>%
mutate(ChihuahuaOwned = ifelse(PrimaryBreed == "Chihuahua", 1, 0))
# Ensure OwnerAgeGroupCd is treated as a factor
subset_df$OwnerAgeGroupCd <- as.factor(subset_df$OwnerAgeGroupCd)
# Binomial logistic regression
binomial_model <- glm(ChihuahuaOwned ~ OwnerAgeGroupCd, family = binomial(link = "logit"), data = subset_df)
unique_levels <- unique(subset_df$OwnerAgeGroupCd)
unique_levels
df_subset
# Debugging: Check column names
names(df_subset)
# Create a binary variable for Chihuahua ownership
subset_df <- subset_df %>%
mutate(ChihuahuaOwned = ifelse(PrimaryBreed == "Chihuahua", 1, 0))
# Ensure OwnerAgeGroupCd is treated as a factor
subset_df$OwnerAgeGroupCd <- as.factor(subset_df$OwnerAgeGroupCd)
# Binomial logistic regression
binomial_model <- glm(ChihuahuaOwned ~ OwnerAgeGroupCd, family = binomial(link = "logit"), data = subset_df)
# Make a subset copy of df_EN for the specific analysis
df_subset <- df_EN
# Debugging: Check column names
names(df_subset)
# Create a binary variable for Chihuahua ownership
subset_df <- subset_df %>%
mutate(ChihuahuaOwned = ifelse(PrimaryBreed == "Chihuahua", 1, 0))
# Ensure OwnerAgeGroupCd is treated as a factor
subset_df$OwnerAgeGroupCd <- as.factor(subset_df$OwnerAgeGroupCd)
# Binomial logistic regression
binomial_model <- glm(ChihuahuaOwned ~ OwnerAgeGroupCd, family = binomial(link = "logit"), data = subset_df)
df_EN
column(df_EN)
cnames(df_EN)
names(df_EN)
names(df)
# I first subset the dataset. This is to include owners in their 40s and the 2 analysed breeds.
subset_df <- df_EN[df_EN$OwnerAgeGroupCd == 40 & (df_EN$PrimaryBreed == "Chihuahua" | df_EN$PrimaryBreed == "Unkwnon"), ]
names(df_EN) # Debugging; Age10Coded wasn't in dataframe.
df_select <- df_EN[, c("PrimaryBreed", "DogAgeCd", "DogSexCd", "OwnerAgeGroupCd", "OwnerAgeGroup")]
# Create a binary variable for Chihuahua ownership
subset_df$ChihuahuaOwned <- ifelse(subset_df$PrimaryBreed == "Chihuahua", 1, 0)
# Binomial logistic regression
binomial_model <- glm(ChihuahuaOwned ~ OwnerAgeGroupCd, family = binomial, data = subset_df)
# Create a binary variable for Chihuahua ownership
subset_df$ChihuahuaOwned <- ifelse(subset_df$PrimaryBreed == "Chihuahua", 1, 0)
# Binomial logistic regression
binomial_model <- glm(ChihuahuaOwned ~ OwnerAgeGroupCd, family = binomial, data = subset_df)
# Summary of the model
summary(binomial_model)
# Predict the probability of owning a Chihuahua vs. owning an unknown breed for individuals in their 40s
age_40 <- df_EN(OwnerAgeGroupCd = 40)
# Predict the probability of owning a Chihuahua vs. owning an unknown breed for individuals in their 40s
age_40 <- data.frame(OwnerAgeGroupCd = 40)
head(age_40)
predicted_prob <- predict(binomial_model2, newdata = age_40, type = "response")
# I first subset the dataset. This is to include owners in their 40s and the 2 analysed breeds.
subset_df <- df_EN[df_EN$OwnerAgeGroupCd == 40 & (df_EN$PrimaryBreed == "Chihuahua" | df_EN$PrimaryBreed == "Unkwnon"), ]
names(df_EN) # Debugging; Age10Coded wasn't in dataframe.
# Create a binary variable for Chihuahua ownership
subset_df$ChihuahuaOwned <- ifelse(subset_df$PrimaryBreed == "Chihuahua", 1, 0)
# Binomial logistic regression
binomial_model_2 <- glm(ChihuahuaOwned ~ OwnerAgeGroupCd, family = binomial, data = subset_df)
# Make a copy of df_EN for subsetting
df_copy <- df_EN
# Subset the dataset to include owners in their 40s and the 2 analyzed breeds
subset_df <- df_copy[df_copy$OwnerAgeGroupCd == 40 &
(df_copy$PrimaryBreed == "Chihuahua" | df_copy$PrimaryBreed == "Unknown"), ]
# Debugging: Check column names
names(df_copy)
# Create a binary variable for Chihuahua ownership
subset_df$ChihuahuaOwned <- ifelse(subset_df$PrimaryBreed == "Chihuahua", 1, 0)
# Ensure OwnerAgeGroupCd is treated as a factor
subset_df$OwnerAgeGroupCd <- as.factor(subset_df$OwnerAgeGroupCd)
# Binomial logistic regression
binomial_model_2 <- glm(ChihuahuaOwned ~ OwnerAgeGroupCd, family = binomial, data = subset_df)
