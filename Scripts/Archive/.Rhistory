title = "Room type count",
subtitle = "Barcelona") +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE) +  # Remove the legend
theme_minimal()
ggplot(Barcelona_md, aes(x = neighbourhood_group)) +
geom_bar(aes(fill = room_type), position = "dodge") +
facet_wrap(~ room_type, scales = "free_y", nrow = 2) +
theme_minimal() +
labs(title = "Acommodation type by neighbourhood group",
subtitle = "Barcelona",
x = "Neighbourhood group",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1))
license_count <- Barcelona_md %>%
group_by(LicenseGrouping) %>%
summarise(quantity = n())
# Create the bar plot
ggplot(license_count,
aes(x = reorder(LicenseGrouping, quantity),
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
labs(x = "",
y = "Count",
title = "License status",
subtitle = "Barcelona") +
geom_text(aes(label = quantity),
hjust = 0,
size = 3) +
theme_minimal() +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
tenant_count <- tenants %>%
group_by(TenantSizeGrouping) %>%
summarise(listing_count = n())
# Host numbers: great vs. small tenants
plotA <- ggplot(tenant_count,
aes(x = TenantSizeGrouping,
y = listing_count,
fill = "red")) +
geom_bar(stat = "identity") +
labs(x = "",
y = "Host count",
title = "Large vs. small tenants - Host count",
subtitle = "Barcelona") +
geom_text(aes(label = listing_count),
hjust = 0,
size = 3) +
theme_minimal() +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
# Listing numbers: great vs. small tenants
tenant_count <- Barcelona_md %>%
group_by(TenantSizeGrouping) %>%
summarise(quantity = n())
plotB <- ggplot(tenant_count,
aes(x = TenantSizeGrouping,
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
labs(x = "",
y = "Listing Count",
title = "Large vs. small tenants - Listing count",
subtitle = "Barcelona") +
geom_text(aes(label = quantity),
hjust = 0,
size = 3) +
theme_minimal() +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
grid.arrange(plotA, plotB, ncol = 1)
listings_per_host <- Barcelona_md %>%
group_by(host_id) %>%
summarize(count = n(), .groups = 'drop') %>%
filter(!is.na(host_id))
# Group all counts of 10 or more into '10+'
listings_per_host$count_grouped <- ifelse(listings_per_host$count > 10,
"10+",
as.character(listings_per_host$count))
# Convert the column to a factor to control the order in the plot
listings_per_host$count_grouped <- factor(listings_per_host$count_grouped,
levels = c(as.character(1:10),
"10+"))
# Create the histogram
ggplot(listings_per_host, aes(x = count_grouped)) +
geom_bar(fill = "#f1796f") +
labs(x = "Listing count",
y = "Number of hosts",
title = "Number of hosts per listing count",
subtitle = "Barcelona") +
theme(axis.text.x = element_text()) +
theme_minimal()
top_hosts <- Barcelona_md %>%
distinct(host_id, .keep_all = TRUE) %>%
arrange(desc(calculated_host_listings_count)) %>%
slice_head(n = 5)
# Create the ggplot2 horizontal barplot
ggplot(top_hosts, aes(x = reorder(host_name, calculated_host_listings_count),
y = calculated_host_listings_count)) +
geom_bar(stat = "identity",
fill = "#f1796f") +
geom_text(aes(label = calculated_host_listings_count),
hjust = 0,
color = "black",
size = 3) +
labs(title = "Top 5 hosts by number of listings",
subtitle = "Barcelona",
x = "",
y = "Listing count") +
coord_flip() + # Flip the plot to horizontal bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1))
top_hosts <- Barcelona_md %>%
distinct(host_id, .keep_all = TRUE) %>%
arrange(desc(calculated_host_listings_count)) %>%
slice_head(n = 5)
# Create the ggplot2 horizontal barplot
ggplot(top_hosts, aes(x = reorder(host_name, calculated_host_listings_count),
y = calculated_host_listings_count)) +
geom_bar(stat = "identity",
fill = "#f1796f") +
geom_text(aes(label = calculated_host_listings_count),
hjust = 0,
color = "black",
size = 3) +
labs(title = "Top 5 hosts by number of listings",
subtitle = "Barcelona",
x = "",
y = "Listing count") +
coord_flip() + # Flip the plot to horizontal bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1))
knitr::opts_chunk$set(echo = TRUE)
lm(price ~ star_rating, data = Barcelona_md)
data(co2)
data(co2)
co2.stl <- stl(co2, s.window = "periodic")
plot(co2.stl)
setwd("~/GitHub/MachineLearningMethods/Scripts")
# This script is for exploring the data and generating code snippets
# If CSV fails to import, make sure that directory is set to:
# Session -> Set Working Directory -> To Source File Location
################################################################################
# Loading libraries
library(tidyverse)
library(ggplot2)
library(sf)
library(mgcv)
################################################################################
# Importing CSV file
df.dogs <- read.csv("../Datasets/kul100od1001.csv")
# Importing city polygons
st.zh <- st_read("../Datasets/stzh.adm_stadtkreise_a.geojson")
################################################################################
# TRANSLATION OF COLUMN NAMES
translation_dict <- c("StichtagDatJahr" = "ReferenceYear",
"DatenstandCd" = "DataStatusCoded",
"HalterId" = "OwnerId",
"AlterV10Cd" = "AgeV10Coded",
"AlterV10Lang" = "AgeV10Text",
"AlterV10Sort" = "AgeV10Sort",
"SexCd" = "OwnerSexCoded",
"SexLang" = "OwnerSexText",
"SexSort" = "SexSort",
"KreisCd" = "DistrictCoded",
"KreisLang" = "DistrictText",
"KreisSort" = "DistrictSort",
"QuarCd" = "QuarterCoded",
"QuarLang" = "QuarterText",
"QuarSort" = "QuarterSort",
"Rasse1Text" = "Breed1Text",
"Rasse2Text" = "Breed2Text",
"RasseMischlingCd" = "MixedBreedCoded",
"RasseMischlingLang" = "MixedBreedText",
"RasseMischlingSort" = "MixedBreedSort",
"RassentypCd" = "BreedTypeCode",
"RassentypLang" = "BreedTypeLong",
"RassentypSort" = "BreedTypeSort",
"GebDatHundJahr" = "DogBirthYear",
"AlterVHundCd" = "DogAgeCoded",
"AlterVHundLang" = "DogAgeText",
"AlterVHundSort" = "DogAgeSort",
"SexHundCd" = "DogSexCoded",
"SexHundLang" = "DogSexText",
"SexHundSort" = "DogSexSort",
"HundefarbeText" = "DogColorText",
"AnzHunde" = "NumberOfDogs")
# Rename columns using translation dictionary
names(df.dogs) <- sapply(names(df.dogs), function(x) {
if (x %in% names(translation_dict)) {
return(translation_dict[x])
} else {
return(x)
}
})
################################################################################
# DATA CLEANING + ENRICHMENT
# Setting NA's (AgeV10Coded = 999 years, DogAgeSort = 999)
df.dogs <- df.dogs %>%
mutate(
AgeV10Coded = ifelse(AgeV10Coded == 999, NA, AgeV10Coded),
AlterVHundSort = ifelse(DogAgeSort == 999, NA, DogAgeSort)
)
# New DogSize column
df.dogs <- df.dogs %>%
mutate(DogSize = case_when(
BreedTypeLong == "Kleinw√ºchsig" ~ "small",
BreedTypeLong == "Rassentypenliste I" ~ "large",
BreedTypeLong == "Rassentypenliste II" ~ "banned",
TRUE ~ NA_character_
))
################################################################################
# GENERAL OBSERVATIONS
# These observations are done on the entire data set (2015-2023)
dim(df.dogs)
str(df.dogs)
# Years that the data set covers
year_count <- df.dogs %>%
distinct(ReferenceYear)
year_count
################################################################################
df.dogs <- df.dogs %>%
mutate(
OwnerSexText = as.factor(OwnerSexText),
AgeV10Text = as.factor(AgeV10Text),
Breed1Text = as.factor(Breed1Text),
Breed2Text = as.factor(Breed2Text),
DogSexText = as.factor(DogSexText),
DogColorText = as.factor(DogColorText),
DogSize = as.factor(DogSize),
DogAgeText = as.factor(DogAgeText)
)
################################################################################
# MODEL 01 -- DOG COUNT BY DISTRICT + LINEAR REGRESSIONS
dog_count_per_neighborhood_year <- df.dogs %>%
group_by(DistrictText, ReferenceYear) %>%
summarize(DogCount = n())
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear,
y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Dog registrations by neighborhood - Linear Model",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
################################################################################
# MODEL 02 -- DOG COUNT BY DISTRICT + SMOOTHER
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear, y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Dog registrations by neighborhood - Smoother",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
################################################################################
# MODEL 03 -- DOG COUNT BY DISTRICT + QUADRATIC REGRESSION
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear, y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = FALSE) +
labs(title = "Dog registrations by neighborhood - Quadratic Regression",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear, y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "poisson", se = FALSE) +
labs(title = "Dog registrations by neighborhood - Smoother",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear, y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Dog registrations by neighborhood - Smoother",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear,
y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Dog registrations by neighborhood - Linear Model",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear, y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Dog registrations by neighborhood - Smoother",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear, y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = FALSE) +
labs(title = "Dog registrations by neighborhood - Quadratic Regression",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
dim(df.dogs)
str(df.dogs)
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear,
y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Dog registrations by neighborhood - Linear Model",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
unique(df.dogs$NumberOfDogs)
unique(df.dogs$DogAgeCoded)
unique(sort(df.dogs$DogAgeCoded))
lm.counts.year <- lm(dog_count_per_neighborhood_year ~ DistricText,
data = df.dogs)
lm.counts.year <- lm(DogCount ~ DistricText,
data = dog_count_per_neighborhood_year)
dog_count_per_neighborhood_year <- df.dogs %>%
group_by(DistrictText, ReferenceYear) %>%
summarize(DogCount = n())
dog_count_per_neighborhood_year
lm.counts.year <- lm(DogCount ~ DistrictText,
data = dog_count_per_neighborhood_year)
coef(lm.counts.year)
plot(lm.counts.year)
lm.counts.year <- lm(DogCount ~ ReferenceYear,
data = dog_count_per_neighborhood_year)
plot(lm.counts.year)
plot(lm.counts.year)
coef(lm.counts.year)
plot(lm.counts.year)
dog_count_per_neighborhood_year <- df.dogs %>%
group_by(DistrictText, ReferenceYear) %>%
summarize(DogCount = n())
summary(lm.counts.year)
lm.counts.year <- lm(DogCount ~ ReferenceYear + DistrictText,
data = dog_count_per_neighborhood_year)
summary(lm.counts.year)
plot(lm.counts.year)
summary(lm.counts.year)
lm.counts.year <- lm(DogCount ~ ReferenceYear * DistrictText,
data = dog_count_per_neighborhood_year)
summary(lm.counts.year)
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear,
y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Dog registrations by neighborhood - Linear Model",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
knitr::opts_chunk$set(echo = TRUE)
dim(df.dogs)
str(df.dogs)
# Years that the data set covers
year_count <- df.dogs %>%
distinct(ReferenceYear)
year_count
ggplotly(fit01_ggplot)
View(df.dogs)
setwd("~/GitHub/MachineLearningMethods")
# Loading libraries
library(tidyverse)
library(ggplot2)
library(sf)
library(mgcv)
library(plotly)
################################################################################
# Importing CSV file
df.dogs <- read.csv("Datasets/kul100od1001.csv")
# Importing city polygons
st.zh <- st_read("Datasets/stzh.adm_stadtkreise_a.geojson")
################################################################################
# TRANSLATION OF COLUMN NAMES
translation_dict <- c("StichtagDatJahr" = "ReferenceYear",
"DatenstandCd" = "DataStatusCoded",
"HalterId" = "OwnerId",
"AlterV10Cd" = "AgeV10Coded",
"AlterV10Lang" = "AgeV10Text",
"AlterV10Sort" = "AgeV10Sort",
"SexCd" = "OwnerSexCoded",
"SexLang" = "OwnerSexText",
"SexSort" = "SexSort",
"KreisCd" = "DistrictCoded",
"KreisLang" = "DistrictText",
"KreisSort" = "DistrictSort",
"QuarCd" = "QuarterCoded",
"QuarLang" = "QuarterText",
"QuarSort" = "QuarterSort",
"Rasse1Text" = "Breed1Text",
"Rasse2Text" = "Breed2Text",
"RasseMischlingCd" = "MixedBreedCoded",
"RasseMischlingLang" = "MixedBreedText",
"RasseMischlingSort" = "MixedBreedSort",
"RassentypCd" = "BreedTypeCode",
"RassentypLang" = "BreedTypeLong",
"RassentypSort" = "BreedTypeSort",
"GebDatHundJahr" = "DogBirthYear",
"AlterVHundCd" = "DogAgeCoded",
"AlterVHundLang" = "DogAgeText",
"AlterVHundSort" = "DogAgeSort",
"SexHundCd" = "DogSexCoded",
"SexHundLang" = "DogSexText",
"SexHundSort" = "DogSexSort",
"HundefarbeText" = "DogColorText",
"AnzHunde" = "NumberOfDogs")
# Rename columns using translation dictionary
names(df.dogs) <- sapply(names(df.dogs), function(x) {
if (x %in% names(translation_dict)) {
return(translation_dict[x])
} else {
return(x)
}
})
################################################################################
# DATA CLEANING
# Setting NAs (AgeV10Coded = 999 years, DogAgeSort = 999)
df.dogs <- df.dogs %>%
mutate(
AgeV10Coded = ifelse(AgeV10Coded == 999, NA, AgeV10Coded),
AlterVHundSort = ifelse(DogAgeSort == 999, NA, DogAgeSort)
)
# Replacing NAs with averages
avg_AgeV10Coded <- mean(df.dogs$AgeV10Coded, na.rm = TRUE)$
rounded_value <- floor(avg_AgeV10Coded / 10) * 10
dog_counts <- df %>%
group_by(DogSexText, DistrictText) %>%
summarise(DogCount = n()) %>%
dog_counts <- df %>%
group_by(DogSexText, DistrictText) %>%
summarise(DogCount = n()) %>%
################################################################################
# DOG COUNT BY DOG SEX AND BY YEAR
df.dogsex_count_year <- df.dogs %>%
group_by(ReferenceYear, DogSexText) %>%
summarize(count = n())
dog_counts <- df.dogs %>%
group_by(DogSexText, DistrictText) %>%
summarise(DogCount = n()) %>%
################################################################################
# DOG COUNT BY DOG SEX AND BY YEAR
df.dogsex_count_year <- df.dogs %>%
group_by(ReferenceYear, DogSexText) %>%
summarize(count = n())
dog_counts_ <- df.dogs %>%
group_by(DogSexText, DistrictText) %>%
summarise(DogCount = n())
dog_counts_sex_district <- df.dogs %>%
group_by(DogSexText, DistrictText) %>%
summarise(DogCount = n())
str(dog_counts_sex_district)
dog_counts_sex_district <- df.dogs %>%
group_by(DogSexText, DogAgeCoded) %>%
summarise(DogCount = n())
dog_counts_sex_district <- df.dogs %>%
group_by(DogSexText) %>%
summarise(DogCount = n())
str(dog_counts_sex_district)
### LS added Binomial
# Create a tibble dataframe to count dogs by dog sex
dog_sex_counts <- df.dogs %>%
group_by(DogSexCoded) %>%
summarize(count = n())
# Binomial regression plot
ggplot(dog_sex_counts, aes(x = DogSexCoded, y = count)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Count of Male vs. Female Dogs",
x = "Sex",
y = "Count") +
theme_minimal() +
geom_smooth(method = "glm", formula = y ~ x, method.args = list(family = "binomial"))
