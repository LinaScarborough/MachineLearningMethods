summarise(Total_Population = sum(Valor))
# Merge the datasets
Barcelona_md <- left_join(Barcelona, demographics_grouped, by =
c("neighbourhood" = "Nom_Barri"))
################################################################################
# EXTRACT STAR-RATING FROM NAME, AND ADD AS COLUMN TO DATA FRAME
extract_star_rating <- function(name) {
matches <- str_extract(name, "★([0-9.]+)")
as.numeric(gsub("★", "", matches))
}
Barcelona_md$star_rating <- sapply(Barcelona_md$name, extract_star_rating)
head(Barcelona_md[c("name", "star_rating")], 5)
################################################################################
# EXTRACT LICENSE STATUS
# Save to a new column 'LicenseGrouping'
Barcelona_md <- Barcelona_md %>%
mutate(LicenseGrouping = case_when(
grepl("Exempt", license, ignore.case = TRUE) ~ "Exempt",
license != "" & !is.na(license) ~ "License is displayed",
TRUE ~ "License is not displayed"
))
print(Barcelona_md)
################################################################################
# GROUP LARGE TENANTS AND SMALL TENANTS
Barcelona_md <- Barcelona_md %>%
mutate(TenantSizeGrouping = case_when(
calculated_host_listings_count >= 5 ~ "Large tenant",
calculated_host_listings_count <= 4 ~ "Small tenant",
TRUE ~ NA_character_ # This handles any unexpected cases, such as missing values
))
# View the first few rows of the transformed dataset to verify the changes
head(Barcelona_md)
################################################################################
# HOST COUNT: LARGE TENANTS AND SMALL TENANTS
# Create a new data frame named tenants
tenants <- Barcelona_md %>%
group_by(host_id) %>%
summarise(listing_count = n())
tenants <- tenants %>%
mutate(TenantSizeGrouping = case_when(
listing_count >= 5 ~ "Large tenant",
listing_count <= 4 ~ "Small tenant",
TRUE ~ NA_character_ # This handles any unexpected cases, such as missing values
))
################################################################################
# FILTER OUT WRONG OUTLIERS
# Specifically, a listing valued at about €60,000 per night,
# which is missing other information fields, and distorts further plots.
# This was a team-agreed decision to provide cleaner results.
Barcelona_md <- filter(Barcelona_md, is.na(price) | price < 50000)
################################################################################
# Load API key. UPDATE WHEN EXPIRED!
register_stadiamaps("8df95c0b-0133-4440-b3f0-c1c6e2f26844", write = TRUE)
# Load GeoJSON file and convert to sf object
geojson_BCN <- sf::st_read("Data/Barcelona/neighbourhoods.geojson")
# Create bounding box limits, map and merge geojson with Barcelona_md
bbox.limits <- sf::st_bbox(geojson_BCN)
map_BCN <- get_stadiamap(getbb("Barcelona"), maptype = "stamen_toner_lite", zoom = 13)
merged_data <- merge(geojson_BCN, Barcelona_md, by = "neighbourhood", all.x = TRUE)
# Plot map
ggmap(map_BCN) +
geom_sf(data = merged_data,
inherit.aes = FALSE,
aes(fill = price.y, label = neighbourhood),
fill = "white",
alpha = 0,
color = "#f1796f",
linewidth = 0.5) +
geom_point(data = Barcelona_md,
aes(x = longitude, y = latitude),
color = "#f1796f",
alpha = 0.2,
size = 0.4) +
labs(title = "Airbnb listings overview",
subtitle = "Barcelona",
x = "Longitude",
y = "Latitude")
listings_count <- Barcelona_md %>%
group_by(neighbourhood_group) %>%
summarise(number_of_listings = n()) %>%
arrange(number_of_listings)  # Ascending order
ggplot(listings_count, aes(x = reorder(neighbourhood_group,
number_of_listings),
y = number_of_listings,
fill = neighbourhood_group)) +
geom_bar(stat = "identity",
color = NA,
show.legend = FALSE) +
scale_fill_manual(values = rep("#f1796f",
length(unique(listings_count$neighbourhood_group)))) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45,
hjust = 1)) +
labs(x = "Neihgbourhood group",
y = "Number of listings",
title = "Airbnb listings by neighbourhood group",
subtitle = "Barcelona") +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
scale_y_continuous(breaks = seq(0, max(listings_count$number_of_listings), by = 1000))
# Group by neighbourhood and count
data_grouped <- Barcelona_md %>%
group_by(neighbourhood_group) %>%
summarise(count = n())
# Group total population by neighbourhood group
unique_population_per_neighbourhood_group <- Barcelona_md %>%
select(neighbourhood_group, Total_Population) %>%
distinct() %>%
filter(!is.na(Total_Population)) %>%
group_by(neighbourhood_group) %>%
summarise(Total_Population = sum(Total_Population))
data_grouped_with_population <- left_join(data_grouped,
unique_population_per_neighbourhood_group,
by = "neighbourhood_group")
data_grouped_with_population$proportion <- data_grouped_with_population$count / data_grouped_with_population$Total_Population
data_grouped_with_population$proportion_percent <- data_grouped_with_population$proportion * 100
# Barplot in ggplot2 as percentages
ggplot(data_grouped_with_population, aes(x = reorder(neighbourhood_group, proportion_percent), y = proportion_percent)) +
geom_bar(stat = "identity", fill = "#f1796f") +
theme_minimal() +
labs(title = "Airbnb listings per 100 residents by neighbourhood group",
subtitle = "Barcelona",
x = "Neighbourhood group",
y = "Percentage (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarize the data to count the number of each property type
property_counts <- Barcelona_md %>%
group_by(room_type) %>%
summarise(quantity = n())
# Create the bar plot
ggplot(property_counts,
aes(x = reorder(room_type, quantity),
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
geom_text(aes(label = quantity),
hjust = 0,
size = 3) +
labs(x = "",
y = "Count",
title = "Room type count",
subtitle = "Barcelona") +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE) +  # Remove the legend
theme_minimal()
ggplot(Barcelona_md, aes(x = neighbourhood_group)) +
geom_bar(aes(fill = room_type), position = "dodge") +
facet_wrap(~ room_type, scales = "free_y", nrow = 2) +
theme_minimal() +
labs(title = "Acommodation type by neighbourhood group",
subtitle = "Barcelona",
x = "Neighbourhood group",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1))
license_count <- Barcelona_md %>%
group_by(LicenseGrouping) %>%
summarise(quantity = n())
# Create the bar plot
ggplot(license_count,
aes(x = reorder(LicenseGrouping, quantity),
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
labs(x = "",
y = "Count",
title = "License status",
subtitle = "Barcelona") +
geom_text(aes(label = quantity),
hjust = 0,
size = 3) +
theme_minimal() +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
tenant_count <- tenants %>%
group_by(TenantSizeGrouping) %>%
summarise(listing_count = n())
# Host numbers: great vs. small tenants
plotA <- ggplot(tenant_count,
aes(x = TenantSizeGrouping,
y = listing_count,
fill = "red")) +
geom_bar(stat = "identity") +
labs(x = "",
y = "Host count",
title = "Large vs. small tenants - Host count",
subtitle = "Barcelona") +
geom_text(aes(label = listing_count),
hjust = 0,
size = 3) +
theme_minimal() +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
# Listing numbers: great vs. small tenants
tenant_count <- Barcelona_md %>%
group_by(TenantSizeGrouping) %>%
summarise(quantity = n())
plotB <- ggplot(tenant_count,
aes(x = TenantSizeGrouping,
y = quantity,
fill = 'red')) +
geom_bar(stat = "identity") +
labs(x = "",
y = "Listing Count",
title = "Large vs. small tenants - Listing count",
subtitle = "Barcelona") +
geom_text(aes(label = quantity),
hjust = 0,
size = 3) +
theme_minimal() +
coord_flip() + # Flip the plot to horizontal bars
guides(fill = FALSE)  # Remove the legend
grid.arrange(plotA, plotB, ncol = 1)
listings_per_host <- Barcelona_md %>%
group_by(host_id) %>%
summarize(count = n(), .groups = 'drop') %>%
filter(!is.na(host_id))
# Group all counts of 10 or more into '10+'
listings_per_host$count_grouped <- ifelse(listings_per_host$count > 10,
"10+",
as.character(listings_per_host$count))
# Convert the column to a factor to control the order in the plot
listings_per_host$count_grouped <- factor(listings_per_host$count_grouped,
levels = c(as.character(1:10),
"10+"))
# Create the histogram
ggplot(listings_per_host, aes(x = count_grouped)) +
geom_bar(fill = "#f1796f") +
labs(x = "Listing count",
y = "Number of hosts",
title = "Number of hosts per listing count",
subtitle = "Barcelona") +
theme(axis.text.x = element_text()) +
theme_minimal()
top_hosts <- Barcelona_md %>%
distinct(host_id, .keep_all = TRUE) %>%
arrange(desc(calculated_host_listings_count)) %>%
slice_head(n = 5)
# Create the ggplot2 horizontal barplot
ggplot(top_hosts, aes(x = reorder(host_name, calculated_host_listings_count),
y = calculated_host_listings_count)) +
geom_bar(stat = "identity",
fill = "#f1796f") +
geom_text(aes(label = calculated_host_listings_count),
hjust = 0,
color = "black",
size = 3) +
labs(title = "Top 5 hosts by number of listings",
subtitle = "Barcelona",
x = "",
y = "Listing count") +
coord_flip() + # Flip the plot to horizontal bars
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1))
# Calculate the mean price for each neighborhood
mean_price_by_neighbourhood <- aggregate(price ~ neighbourhood, merged_data, mean)
median(Barcelona_md$price)
mean(Barcelona_md$price)
median(Barcelona_md$price, na.rm = TRUE)
mean(Barcelona_md$Eixample$price)
mean(Barcelona_md$neighbourhood_group = "Eixample")
str(Barcelona_md)
median(Barcelona_md$price[Barcelona_md$neighbourhood_group == "Eixample"], na.rm = TRUE)
median(Barcelona_md$price[Barcelona_md$neighbourhood_group == "Ciutat Vella"], na.rm = TRUE)
geojson_BCN$abbrev_neighbourhood
knitr::opts_chunk$set(echo = TRUE)
geojson_BCN$abbrev_neighbourhood <- str_wrap(geojson_BCN$neighbourhood,
width = 10)
library(stringr)
# Add abbreviated neighbourhood name
geojson_BCN$abbrev_neighbourhood <- str_wrap(geojson_BCN$neighbourhood,
width = 10)
geojson_BCN$abbrev_neighbourhood
install.packages("mgcv")
library(mgcv)
# Fit a GAM
gam_model <- gam(DogCount ~ s(ReferenceYear) + DistrictText, data = dog_count_per_neighborhood_year)
setwd("~/GitHub/MachineLearningMethods/Scripts")
# This script is for exploring the data and generating code snippets
# If CSV fails to import, make sure that directory is set to:
# Session -> Set Working Directory -> To Source File Location
################################################################################
# Loading libraries
library(tidyverse)
library(ggplot2)
library(sf)
library(mgcv)
################################################################################
# Importing CSV file
df.dogs <- read.csv("../Datasets/kul100od1001.csv")
# Importing city polygons
st.zh <- st_read("../Datasets/stzh.adm_stadtkreise_a.geojson")
################################################################################
# TRANSLATION OF COLUMN NAMES
translation_dict <- c("StichtagDatJahr" = "ReferenceYear",
"DatenstandCd" = "DataStatusCoded",
"HalterId" = "OwnerId",
"AlterV10Cd" = "AgeV10Coded",
"AlterV10Lang" = "AgeV10Text",
"AlterV10Sort" = "AgeV10Sort",
"SexCd" = "OwnerSexCoded",
"SexLang" = "OwnerSexText",
"SexSort" = "SexSort",
"KreisCd" = "DistrictCoded",
"KreisLang" = "DistrictText",
"KreisSort" = "DistrictSort",
"QuarCd" = "QuarterCoded",
"QuarLang" = "QuarterText",
"QuarSort" = "QuarterSort",
"Rasse1Text" = "Breed1Text",
"Rasse2Text" = "Breed2Text",
"RasseMischlingCd" = "MixedBreedCoded",
"RasseMischlingLang" = "MixedBreedText",
"RasseMischlingSort" = "MixedBreedSort",
"RassentypCd" = "BreedTypeCode",
"RassentypLang" = "BreedTypeLong",
"RassentypSort" = "BreedTypeSort",
"GebDatHundJahr" = "DogBirthYear",
"AlterVHundCd" = "DogAgeCoded",
"AlterVHundLang" = "DogAgeText",
"AlterVHundSort" = "DogAgeSort",
"SexHundCd" = "DogSexCoded",
"SexHundLang" = "DogSexText",
"SexHundSort" = "DogSexSort",
"HundefarbeText" = "DogColorText",
"AnzHunde" = "NumberOfDogs")
# Rename columns using translation dictionary
names(df.dogs) <- sapply(names(df.dogs), function(x) {
if (x %in% names(translation_dict)) {
return(translation_dict[x])
} else {
return(x)
}
})
################################################################################
# DATA CLEANING + ENRICHMENT
# Setting NA's (AgeV10Coded = 999 years, DogAgeSort = 999)
df.dogs <- df.dogs %>%
mutate(
AgeV10Coded = ifelse(AgeV10Coded == 999, NA, AgeV10Coded),
AlterVHundSort = ifelse(DogAgeSort == 999, NA, DogAgeSort)
)
# New DogSize column
df.dogs <- df.dogs %>%
mutate(DogSize = case_when(
BreedTypeLong == "Kleinwüchsig" ~ "small",
BreedTypeLong == "Rassentypenliste I" ~ "large",
BreedTypeLong == "Rassentypenliste II" ~ "banned",
TRUE ~ NA_character_
))
################################################################################
# GENERAL OBSERVATIONS
# These observations are done on the entire data set (2015-2023)
dim(df.dogs)
str(df.dogs)
# Years that the data set covers
year_count <- df.dogs %>%
distinct(ReferenceYear)
year_count
################################################################################
df.dogs <- df.dogs %>%
mutate(
OwnerSexText = as.factor(OwnerSexText),
AgeV10Text = as.factor(AgeV10Text),
Breed1Text = as.factor(Breed1Text),
Breed2Text = as.factor(Breed2Text),
DogSexText = as.factor(DogSexText),
DogColorText = as.factor(DogColorText),
DogSize = as.factor(DogSize),
DogAgeText = as.factor(DogAgeText)
)
################################################################################
# MODEL 01 -- DOG COUNT BY DISTRICT + LINEAR REGRESSIONS
dog_count_per_neighborhood_year <- df.dogs %>%
group_by(DistrictText, ReferenceYear) %>%
summarize(DogCount = n())
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear,
y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Dog registrations by neighborhood",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
################################################################################
# MODEL 02 -- DOG COUNT BY DISTRICT + SMOOTHER
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear, y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Dog registrations by neighborhood",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
################################################################################
# MODEL 03 -- DOG COUNT BY DISTRICT + SMOOTHER
# Fit a GAM
gam_model <- gam(DogCount ~ s(ReferenceYear) + DistrictText, data = dog_count_per_neighborhood_year)
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear, y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Dog registrations by neighborhood - Smoother",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
# Fit a GAM
gam_model <- gam(DogCount ~ s(ReferenceYear) + DistrictText, data = dog_count_per_neighborhood_year)
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear,
y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Dog registrations by neighborhood - Linear Model",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
# Fit a GAM
gam_model <- gam(DogCount ~ s(ReferenceYear) + DistrictText, data = dog_count_per_neighborhood_year)
# Fit a GAM
gam_model <- gam(DogCount ~ s(ReferenceYear,
df = 3) + DistrictText,
data = dog_count_per_neighborhood_year)
# Fit a GAM
gam_model <- gam(DogCount ~ s(ReferenceYear, df = 3) + DistrictText,
data = dog_count_per_neighborhood_year)
# Fit a GAM
gam_model <- gam(DogCount ~ s(ReferenceYear) + DistrictText, data = dog_count_per_neighborhood_year)
# Fit a GAM
gam_model <- gam(DogCount ~ s(ReferenceYear, df = 3))
# Predict values using the GAM model for smoother plot
predictions <- predict(gam_model,
newdata = data.frame(ReferenceYear = unique(dog_count_per_neighborhood_year$ReferenceYear),
DistrictText = rep(levels(dog_count_per_neighborhood_year$DistrictText), each = length(unique(dog_count_per_neighborhood_year$ReferenceYear)))))
# Fit a GAM
gam_model <- gam(DogCount ~ s(ReferenceYear, df = 3) + DistrictText,
data = dog_count_per_neighborhood_year)
# Convert DistrictText to a factor if it's not already
dog_count_per_neighborhood_year$DistrictText <- as.factor(dog_count_per_neighborhood_year$DistrictText)
# Fit the GAM model with an interaction term
gam_model <- gam(DogCount ~ s(ReferenceYear, df = 3) + s(ReferenceYear, by = DistrictText, df = 3),
data = dog_count_per_neighborhood_year)
# Convert DistrictText to a factor if it's not already
dog_count_per_neighborhood_year$DistrictText <- as.factor(dog_count_per_neighborhood_year$DistrictText)
# Fit the GAM model with a tensor product smooth for the interaction
gam_model <- gam(DogCount ~ s(ReferenceYear, df = 3) + te(ReferenceYear, DistrictText, bs = c("tp", "re")),
data = dog_count_per_neighborhood_year)
# Predict values using the GAM model for smoother plot
predictions <- predict(gam_model,
newdata = data.frame(ReferenceYear = unique(dog_count_per_neighborhood_year$ReferenceYear),
DistrictText = rep(levels(dog_count_per_neighborhood_year$DistrictText), each = length(unique(dog_count_per_neighborhood_year$ReferenceYear)))))
# Fit a GAM model
gam_model <- gam(DogCount ~ s(ReferenceYear) + DistrictText, data = dog_count_per_neighborhood_year)
# Fit a GAM model
gam_model <- gam(DogCount ~ s(ReferenceYear, df = 3) + DistrictText, data = dog_count_per_neighborhood_year)
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear, y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = FALSE) +
labs(title = "Dog registrations by neighborhood - Quadratic Regression",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear,
y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Dog registrations by neighborhood - Linear Model",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear, y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Dog registrations by neighborhood - Smoother",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
ggplot(dog_count_per_neighborhood_year,
aes(x = ReferenceYear, y = DogCount,
color = DistrictText)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = FALSE) +
labs(title = "Dog registrations by neighborhood - Quadratic Regression",
x = "",
y = "",
color = "District") +
theme_minimal() +
scale_x_continuous(breaks = unique(dog_count_per_neighborhood_year$ReferenceYear))
